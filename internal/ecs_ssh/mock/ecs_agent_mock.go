// Code generated by MockGen. DO NOT EDIT.
// Source: ecs_agent.go
//
// Generated by this command:
//
//	mockgen -source=ecs_agent.go -package=mock -destination=./mock/ecs_agent_mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	ecs_ssh "aws-ssh/internal/ecs_ssh"
	types "aws-ssh/internal/ecs_ssh/types"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockECSAgent is a mock of ECSAgent interface.
type MockECSAgent struct {
	ctrl     *gomock.Controller
	recorder *MockECSAgentMockRecorder
}

// MockECSAgentMockRecorder is the mock recorder for MockECSAgent.
type MockECSAgentMockRecorder struct {
	mock *MockECSAgent
}

// NewMockECSAgent creates a new mock instance.
func NewMockECSAgent(ctrl *gomock.Controller) *MockECSAgent {
	mock := &MockECSAgent{ctrl: ctrl}
	mock.recorder = &MockECSAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECSAgent) EXPECT() *MockECSAgentMockRecorder {
	return m.recorder
}

// GetTask mocks base method.
func (m *MockECSAgent) GetTask(ctx context.Context, in ecs_ssh.GetTaskInput) (types.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, in)
	ret0, _ := ret[0].(types.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockECSAgentMockRecorder) GetTask(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockECSAgent)(nil).GetTask), ctx, in)
}

// ListRunningTask mocks base method.
func (m *MockECSAgent) ListRunningTasks(ctx context.Context, in ecs_ssh.ListRunningTasksInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunningTasks", ctx, in)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunningTask indicates an expected call of ListRunningTask.
func (mr *MockECSAgentMockRecorder) ListRunningTask(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunningTasks", reflect.TypeOf((*MockECSAgent)(nil).ListRunningTasks), ctx, in)
}
