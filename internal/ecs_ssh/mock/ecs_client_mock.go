// Code generated by MockGen. DO NOT EDIT.
// Source: ecs_client.go
//
// Generated by this command:
//
//	mockgen -source=ecs_client.go -package=mock -destination=./mock/ecs_client_mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	ecs_ssh "aws-ssh/internal/ecs_ssh"
	types "aws-ssh/internal/ecs_ssh/types"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockECSClient is a mock of ECSClient interface.
type MockECSClient struct {
	ctrl     *gomock.Controller
	recorder *MockECSClientMockRecorder
}

// MockECSClientMockRecorder is the mock recorder for MockECSClient.
type MockECSClientMockRecorder struct {
	mock *MockECSClient
}

// NewMockECSClient creates a new mock instance.
func NewMockECSClient(ctrl *gomock.Controller) *MockECSClient {
	mock := &MockECSClient{ctrl: ctrl}
	mock.recorder = &MockECSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECSClient) EXPECT() *MockECSClientMockRecorder {
	return m.recorder
}

// GetTask mocks base method.
func (m *MockECSClient) GetTask(ctx context.Context, in ecs_ssh.GetTaskInput) (types.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", ctx, in)
	ret0, _ := ret[0].(types.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockECSClientMockRecorder) GetTask(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockECSClient)(nil).GetTask), ctx, in)
}

// ListRunningTasks mocks base method.
func (m *MockECSClient) ListRunningTasks(ctx context.Context, in ecs_ssh.ListRunningTasksInput) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRunningTasks", ctx, in)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRunningTasks indicates an expected call of ListRunningTasks.
func (mr *MockECSClientMockRecorder) ListRunningTasks(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRunningTasks", reflect.TypeOf((*MockECSClient)(nil).ListRunningTasks), ctx, in)
}
