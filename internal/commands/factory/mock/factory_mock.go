// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go
//
// Generated by this command:
//
//	mockgen -source=factory.go -package=mock -destination=./mock/factory_mock.go
//
// Package mock is a generated GoMock package.
package mock

import (
	ecs_ssh "aws-ssh/internal/ecs_ssh"
	sessions "aws-ssh/internal/sessions"
	context "context"
	reflect "reflect"

	aws "github.com/aws/aws-sdk-go-v2/aws"
	gomock "go.uber.org/mock/gomock"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// BuildAWSConfig mocks base method.
func (m *MockFactory) BuildAWSConfig(ctx context.Context) (aws.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAWSConfig", ctx)
	ret0, _ := ret[0].(aws.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAWSConfig indicates an expected call of BuildAWSConfig.
func (mr *MockFactoryMockRecorder) BuildAWSConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAWSConfig", reflect.TypeOf((*MockFactory)(nil).BuildAWSConfig), ctx)
}

// BuildECSService mocks base method.
func (m *MockFactory) BuildECSService(cfg aws.Config) ecs_ssh.ECSService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildECSService", cfg)
	ret0, _ := ret[0].(ecs_ssh.ECSService)
	return ret0
}

// BuildECSService indicates an expected call of BuildECSService.
func (mr *MockFactoryMockRecorder) BuildECSService(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildECSService", reflect.TypeOf((*MockFactory)(nil).BuildECSService), cfg)
}

// BuildSessionManager mocks base method.
func (m *MockFactory) BuildSessionManager(cfg aws.Config) sessions.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildSessionManager", cfg)
	ret0, _ := ret[0].(sessions.Manager)
	return ret0
}

// BuildSessionManager indicates an expected call of BuildSessionManager.
func (mr *MockFactoryMockRecorder) BuildSessionManager(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildSessionManager", reflect.TypeOf((*MockFactory)(nil).BuildSessionManager), cfg)
}

// Init mocks base method.
func (m *MockFactory) Init(profile, region string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", profile, region)
}

// Init indicates an expected call of Init.
func (mr *MockFactoryMockRecorder) Init(profile, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockFactory)(nil).Init), profile, region)
}
